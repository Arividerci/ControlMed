import datetime
from datetime import date
from django import forms
from django.contrib.auth.models import User
from .models import Patient, MedicalStaff, Hospitalization, Purpose, Procedures, Medication, ProceduresExecution, MedicationDispensing


from django.core.exceptions import ValidationError


class HospitalizationForm(forms.ModelForm):
    hospitalization_startdate = forms.DateField(
        required=False,
        widget=forms.DateInput(attrs={'type': 'date'}),
        initial=datetime.date.today
    )
    hospitalization_enddate = forms.DateField(
        widget=forms.DateInput(attrs={'type': 'date'}),
        required=True
    )

    class Meta:
        model = Hospitalization
        fields = ['hospitalization_room', 'hospitalization_startdate', 'hospitalization_enddate']

class AddPatientForm(forms.ModelForm):
    GENDER_CHOICES = [
        ('–º—É–∂—Å–∫–æ–π', '–ú—É–∂—Å–∫–æ–π'),
        ('–∂–µ–Ω—Å–∫–∏–π', '–ñ–µ–Ω—Å–∫–∏–π'),
    ]

    BLOOD_TYPE_CHOICES = [
        ('O-', 'O-'), ('O+', 'O+'),
        ('A-', 'A-'), ('A+', 'A+'),
        ('B-', 'B-'), ('B+', 'B+'),
        ('AB-', 'AB-'), ('AB+', 'AB+'),
    ]

    patient_gender = forms.ChoiceField(choices=GENDER_CHOICES, label='–ü–æ–ª')
    patient_blood_type = forms.ChoiceField(choices=BLOOD_TYPE_CHOICES, label='–ì—Ä—É–ø–ø–∞ –∫—Ä–æ–≤–∏')

    class Meta:
        model = Patient
        fields = [
            'patient_name',
            'patient_birthday',
            'patient_gender',
            'patient_weight',
            'patient_height',
            'patient_blood_type',
            'patient_photo',
        ]
        widgets = {
            'patient_birthday': forms.DateInput(attrs={'type': 'date'}),
        }

        labels = {
            'patient_name': '–§–ò–û',
            'patient_birthday': '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è',
            'patient_weight': '–í–µ—Å',
            'patient_height': '–†–æ—Å—Ç',
            'patient_photo': '–§–æ—Ç–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞',
        }

class RegisterStep1Form(forms.Form):
    username = forms.CharField(max_length=150, label="–õ–æ–≥–∏–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, s10361784ms)")
    email = forms.EmailField(label='–ü–æ—á—Ç–∞')
    password = forms.CharField(widget=forms.PasswordInput, label='–ü–∞—Ä–æ–ª—å')
    password_confirm = forms.CharField(widget=forms.PasswordInput, label='–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è')

    def clean(self):
        cleaned_data = super().clean()
        password = cleaned_data.get("password")
        password_confirm = cleaned_data.get("password_confirm")
        email = cleaned_data.get("email")

        if password and password_confirm and password != password_confirm:
            raise ValidationError("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.")

        if email and User.objects.filter(email=email).exists():
            raise ValidationError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–æ–π –ø–æ—á—Ç–æ–π —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")

        return cleaned_data

    def clean_username(self):
        username = self.cleaned_data['username']
        if User.objects.filter(username=username).exists():
            raise ValidationError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return username

class PurposeForm(forms.ModelForm):
    purpose_startdate = forms.DateField(
        widget=forms.DateInput(attrs={'type': 'date'}),
        label='–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞'
    )

    class Meta:
        model = Purpose
        fields = [
            'purpose_startdate',
            'purpose_duration',
            'purpose_status',
            'purpose_diagnosis',
            # üëá –Ω–µ –≤–∫–ª—é—á–∞–µ–º medical_staff –∏ hospitalization
        ]
        widgets = {
            'purpose_diagnosis': forms.Textarea(attrs={'rows': 4}),
        }
        labels = {
            'purpose_duration': '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–¥–Ω–µ–π)',
            'purpose_status': '–°—Ç–∞—Ç—É—Å',
            'purpose_diagnosis': '–î–∏–∞–≥–Ω–æ–∑ / –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
        }
        
class LoginForm(forms.Form):
    username = forms.CharField(label="–õ–æ–≥–∏–Ω")
    password = forms.CharField(widget=forms.PasswordInput, label="–ü–∞—Ä–æ–ª—å")


class RegisterStep2Form(forms.ModelForm):
    GENDER_CHOICES = [
        ('–º—É–∂', '–ú—É–∂—Å–∫–æ–π'),
        ('–∂–µ–Ω', '–ñ–µ–Ω—Å–∫–∏–π'),
    ]

    POST_CHOICES = [
        ('–ì–ª–∞–≤–≤—Ä–∞—á', '–ì–ª–∞–≤–≤—Ä–∞—á'),
        ('–í—Ä–∞—á', '–í—Ä–∞—á'),
        ('–ú–µ–¥—Å–µ—Å—Ç—Ä–∞', '–ú–µ–¥—Å–µ—Å—Ç—Ä–∞'),
        ('–ú–µ–¥–±—Ä–∞—Ç', '–ú–µ–¥–±—Ä–∞—Ç'),
    ]


    SPECIALISATION_CHOICES = [
        ("–¢–µ—Ä–∞–ø–µ–≤—Ç", "–¢–µ—Ä–∞–ø–µ–≤—Ç"),
        ("–•–∏—Ä—É—Ä–≥", "–•–∏—Ä—É—Ä–≥"),
        ("–ü–µ–¥–∏–∞—Ç—Ä", "–ü–µ–¥–∏–∞—Ç—Ä"),
        ("–û—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥", "–û—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥"),
        ("–û—Ç–æ–ª–∞—Ä–∏–Ω–≥–æ–ª–æ–≥", "–û—Ç–æ–ª–∞—Ä–∏–Ω–≥–æ–ª–æ–≥"),
        ("–ù–µ–≤—Ä–æ–ª–æ–≥", "–ù–µ–≤—Ä–æ–ª–æ–≥"),
        ("–ê–Ω–µ—Å—Ç–µ–∑–∏–æ–ª–æ–≥", "–ê–Ω–µ—Å—Ç–µ–∑–∏–æ–ª–æ–≥"),
        ("–§–∏–∑–∏–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç", "–§–∏–∑–∏–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç"),
        ("–î–µ—Ä–º–∞—Ç–æ–ª–æ–≥", "–î–µ—Ä–º–∞—Ç–æ–ª–æ–≥"),
        ("–ò–Ω—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç", "–ò–Ω—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç"),
        ("–†–µ–∞–Ω–∏–º–∞—Ç–æ–ª–æ–≥", "–†–µ–∞–Ω–∏–º–∞—Ç–æ–ª–æ–≥"),
    ]

    medical_staff_name = forms.CharField(label='–§–ò–û')
    medical_staff_gender = forms.ChoiceField(choices=GENDER_CHOICES, label='–ü–æ–ª')
    medical_staff_birthday = forms.DateField(
        label='–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è',
        widget=forms.DateInput(attrs={'type': 'date'})
    )

    medical_staff_post = forms.ChoiceField(
        choices=POST_CHOICES,
        label='–î–æ–ª–∂–Ω–æ—Å—Ç—å'
    )

    medical_staff_specialisation = forms.ChoiceField(
        label="–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è",
        choices=SPECIALISATION_CHOICES
    )

    class Meta:
        model = MedicalStaff
        fields = [
            'medical_staff_name',
            'medical_staff_birthday',
            'medical_staff_gender',
            'medical_staff_post',
            'medical_staff_specialisation',
        ]

class ProceduresExecutionForm(forms.ModelForm):
    class Meta:
        model = ProceduresExecution
        fields = ['procedures_id', 'procedures_execution_date', 'procedures_execution_duration', 'procedures_execution_comment', 'procedures_execution_status']

class MedicationDispensingForm(forms.ModelForm):
    class Meta:
        model = MedicationDispensing
        fields = ['medication_id', 'medication_dispensing_dose', 'medication_dispensing_comment', 'medication_dispensing_status']
        widgets = {
            'medication_dispensing_date': forms.DateInput(attrs={'type': 'date', 'value': date.today()})
        }


class EditProfileForm(forms.ModelForm):
    class Meta:
        model = MedicalStaff
        fields = ['medical_staff_name', 'medical_staff_birthday', 'medical_staff_gender', 'medical_staff_post', 'medical_staff_specialisation']

class AddProcedureExecutionForm(forms.ModelForm):
    STATUS_CHOICES = [
        ('–í –æ–∂–∏–¥–∞–Ω–∏–∏', '–í –æ–∂–∏–¥–∞–Ω–∏–∏'),
        ('–í—ã–ø–æ–ª–Ω–µ–Ω–æ', '–í—ã–ø–æ–ª–Ω–µ–Ω–æ'),
        ('–û—Ç–º–µ–Ω–µ–Ω–æ', '–û—Ç–º–µ–Ω–µ–Ω–æ'),
    ]

    procedures_execution_status = forms.ChoiceField(
        choices=STATUS_CHOICES,
        label="–°—Ç–∞—Ç—É—Å",
        widget=forms.Select,
        initial='–í –æ–∂–∏–¥–∞–Ω–∏–∏'  
    )

    class Meta:
        model = ProceduresExecution
        fields = ['procedures_id', 'procedures_execution_duration', 'procedures_execution_comment', 'procedures_execution_status']
        widgets = {
            'procedures_execution_date': forms.DateInput(attrs={'type': 'date', 'value': date.today()})
        }

class MedicationDispensingForm(forms.ModelForm):
    STATUS_CHOICES = [
        ('–í –æ–∂–∏–¥–∞–Ω–∏–∏', '–í –æ–∂–∏–¥–∞–Ω–∏–∏'),
        ('–í—ã–ø–æ–ª–Ω–µ–Ω–æ', '–í—ã–ø–æ–ª–Ω–µ–Ω–æ'),
        ('–û—Ç–º–µ–Ω–µ–Ω–æ', '–û—Ç–º–µ–Ω–µ–Ω–æ'),
    ]
    
    medication_dispensing_status = forms.ChoiceField(
        choices=STATUS_CHOICES,
        label="–°—Ç–∞—Ç—É—Å",
        widget=forms.Select,
        initial='–í –æ–∂–∏–¥–∞–Ω–∏–∏'  
    )

    class Meta:
        model = MedicationDispensing
        fields = ['medication_id', 'medication_dispensing_dose', 'medication_dispensing_comment', 'medication_dispensing_status']
        widgets = {
            'medication_dispensing_date': forms.DateInput(attrs={'type': 'date', 'value': date.today()})
        }